" Configurando vim-plug para gestão de plugins.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
call plug#begin()
Plug 'ctrlpvim/ctrlp.vim'
Plug 'vim-airline/vim-airline'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'dart-lang/dart-vim-plugin'
" Plug 'natebosch/vim-lsc-dart'
Plug 'thosakwe/vim-flutter'
Plug 'elm-tooling/elm-language-server'
Plug 'elm-tooling/elm-vim'
Plug 'janko/vim-test'
Plug 'andys8/vim-elm-syntax', { 'for': ['elm'] }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'alvan/vim-closetag'
Plug 'google/vim-searchindex'
Plug 'junegunn/goyo.vim'
Plug 'dansomething/vim-eclim'
Plug 'ervandew/supertab'
Plug 'will133/vim-dirdiff'
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'editorconfig/editorconfig-vim'
Plug 'ryanoasis/vim-devicons'
call plug#end()

" Highlighting e cores.
syntax on
color industry
:highlight Pmenu ctermbg=gray guibg=gray

" Destaca tabs e espaços no final das linha.
" exec "set listchars=tab:\uBB\uBB,trail:\uB7,nbsp:~"
" set list

" Configurações do wildmenu (auto completar o tab mais eficiência/visual).
set wildmenu
set wildmode=longest:list,full

" Exibe caracter que faz 'match' com o caracter selecionado atualmente.
set showmatch
set mat=2

" Remove toolbar no gvim.
set guioptions-=T

" Recarrega caso arquivo tenha sido alterado fora do vim.
set autoread

" Usar por padrão o clipboard para copiar de texto.
if has("clipboard")
  set clipboard=unnamed

  if has("unnamedplus") " Suporte ao X11. 
    set clipboard+=unnamedplus
  endif
endif

" Desabilitando criação de arquivos de swap.
set noswapfile

" Identação de código.
filetype plugin indent on

" Se string de busca for toda minúscula, faça uma busca case insensitive.
set smartcase

" Melhora regex.
set magic

" Desabilita sons em caso de erros.
set belloff=all

" Por padrão usar utf-8 e unix.
set encoding=utf8
set ffs=unix,dos,mac

" Plugin de busca (ctr + p).
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_root_markers = ['.ctrlp']

" Exibir número da linha corrente e relativas.
set relativenumber
set number

" Tabs e indentação.
set autoindent
set smartindent
" set shiftwidth=2
set expandtab
" set tabstop=2

" Configurando vim-airline (tabs).
let g:airline#extensions#tabline#enabled = 1

" Configurando atalhos para o flutter.
nnoremap <leader>fa :FlutterRun --release --flavor dev -t lib/main_dev.dart<cr>
nnoremap <leader>fq :FlutterQuit<cr>
nnoremap <leader>fr :FlutterHotReload<cr>
nnoremap <leader>fR :FlutterHotRestart<cr>
nnoremap <leader>fD :FlutterVisualDebug<cr>

" Melhorando visualizacao de mensagens de erro.
set cmdheight=3

" Configurando coc.
nmap <leader>rn <Plug>(coc-rename)
" Apply AutoFix to problem on the current line.
nmap <leader>af <Plug>(coc-fix-current)
" For refactoring.
nmap <leader>rf <Plug>(coc-codeaction-selected)
" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Spelling.
autocmd BufRead,BufNewFile *.txt setlocal spell spelllang=pt_br
set complete+=kspell

" Configurando Java.
let g:EclimFileTypeValidate = 1

" Autocomplete com tab.
let g:SuperTabDefaultCompletionType = 'context'
let g:SuperTabClosePreviewOnPopupClose = 1

" Removendo cabeçalho do netrr.
let g:netrw_banner = 0

" Importa e organiza ao salvar arquivos .java.
autocmd BufWritePre *.java :JavaImportOrganize

" Persistindo undo.
set undodir=~/.vim/undodir
set undofile
set undolevels=1000
set undoreload=10000

" Coc explorer (instalar antes usando :CocInstall coc-explorer).
:nmap <space>e :CocCommand explorer<CR>

command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" Gitlab / git.
let g:fugitive_gitlab_domains = ['https://git.serpro']
let g:gitlab_api_keys = {'git.serpro': 'hypLdfHTkN6GK3kGKpq9'}

let g:EditorConfig_exclude_patterns = ['fugitive://.*']

" Configurações do markdown.
let g:instant_markdown_browser = "firefox --new-window"
